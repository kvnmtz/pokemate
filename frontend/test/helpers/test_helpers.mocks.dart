// Mocks generated by Mockito 5.4.4 from annotations
// in pokemate/test/helpers/test_helpers.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;
import 'dart:ui' as _i4;

import 'package:flutter/material.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:pokemate/common/network_result.dart' as _i5;
import 'package:pokemate/common/pokemon_data/generation.dart' as _i15;
import 'package:pokemate/common/pokemon_data/move.dart' as _i17;
import 'package:pokemate/common/pokemon_data/pokemon.dart' as _i16;
import 'package:pokemate/common/pokemon_data/pokemon_types.dart' as _i18;
import 'package:pokemate/services/backend_api_service.dart' as _i19;
import 'package:pokemate/services/custom_bottom_sheet_service.dart' as _i23;
import 'package:pokemate/services/custom_dialog_service.dart' as _i22;
import 'package:pokemate/services/custom_snackbar_service.dart' as _i21;
import 'package:pokemate/services/page_storage_service.dart' as _i12;
import 'package:pokemate/services/pokemon_data_service.dart' as _i14;
import 'package:pokemate/services/settings_service.dart' as _i13;
import 'package:pokemate/services/web_outdated_cache_service.dart' as _i24;
import 'package:pokemate/ui/dialogs/load_team/load_team_dialog_model.dart' as _i20;
import 'package:stacked/stacked.dart' as _i2;
import 'package:stacked_services/src/bottom_sheet/bottom_sheet_service.dart' as _i8;
import 'package:stacked_services/src/dialog/dialog_service.dart' as _i10;
import 'package:stacked_services/src/models/overlay_request.dart' as _i11;
import 'package:stacked_services/src/models/overlay_response.dart' as _i9;
import 'package:stacked_services/src/navigation/router_service.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeRootStackRouter_0 extends _i1.SmartFake implements _i2.RootStackRouter {
  _FakeRootStackRouter_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRouteData_1 extends _i1.SmartFake implements _i2.RouteData {
  _FakeRouteData_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRoutingController_2 extends _i1.SmartFake implements _i2.RoutingController {
  _FakeRoutingController_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGlobalKey_3<T extends _i3.State<_i3.StatefulWidget>> extends _i1.SmartFake implements _i3.GlobalKey<T> {
  _FakeGlobalKey_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLocale_4 extends _i1.SmartFake implements _i4.Locale {
  _FakeLocale_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNetworkResult_5<T> extends _i1.SmartFake implements _i5.NetworkResult<T> {
  _FakeNetworkResult_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeScaffoldFeatureController_6<T extends _i3.Widget, U> extends _i1.SmartFake implements _i3.ScaffoldFeatureController<T, U> {
  _FakeScaffoldFeatureController_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [RouterService].
///
/// See the documentation for Mockito's code generation for more information.
class MockRouterService extends _i1.Mock implements _i6.RouterService {
  @override
  _i2.RootStackRouter get router => (super.noSuchMethod(
        Invocation.getter(#router),
        returnValue: _FakeRootStackRouter_0(
          this,
          Invocation.getter(#router),
        ),
        returnValueForMissingStub: _FakeRootStackRouter_0(
          this,
          Invocation.getter(#router),
        ),
      ) as _i2.RootStackRouter);

  @override
  set router(_i2.RootStackRouter? _router) => super.noSuchMethod(
        Invocation.setter(
          #router,
          _router,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<_i2.StackedPage<dynamic>> get stack => (super.noSuchMethod(
        Invocation.getter(#stack),
        returnValue: <_i2.StackedPage<dynamic>>[],
        returnValueForMissingStub: <_i2.StackedPage<dynamic>>[],
      ) as List<_i2.StackedPage<dynamic>>);

  @override
  _i2.RouteData get topRoute => (super.noSuchMethod(
        Invocation.getter(#topRoute),
        returnValue: _FakeRouteData_1(
          this,
          Invocation.getter(#topRoute),
        ),
        returnValueForMissingStub: _FakeRouteData_1(
          this,
          Invocation.getter(#topRoute),
        ),
      ) as _i2.RouteData);

  @override
  dynamic setRouter(_i2.RootStackRouter? router) => super.noSuchMethod(
        Invocation.method(
          #setRouter,
          [router],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i7.Future<dynamic> navigateTo(
    _i2.PageRouteInfo<dynamic>? route, {
    _i2.OnNavigationFailure? onFailure,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #navigateTo,
          [route],
          {#onFailure: onFailure},
        ),
        returnValue: _i7.Future<dynamic>.value(),
        returnValueForMissingStub: _i7.Future<dynamic>.value(),
      ) as _i7.Future<dynamic>);

  @override
  _i7.Future<void> navigateToPath({
    required String? path,
    bool? includePrefixMatches = false,
    _i2.OnNavigationFailure? onFailure,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #navigateToPath,
          [],
          {
            #path: path,
            #includePrefixMatches: includePrefixMatches,
            #onFailure: onFailure,
          },
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<T?> navigateWithTransition<T extends Object?>(
    _i3.Widget? widget, {
    _i3.RouteTransitionsBuilder? transitionBuilder,
    bool? fullscreenDialog = false,
    Duration? transitionDuration = const Duration(milliseconds: 300),
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #navigateWithTransition,
          [widget],
          {
            #transitionBuilder: transitionBuilder,
            #fullscreenDialog: fullscreenDialog,
            #transitionDuration: transitionDuration,
          },
        ),
        returnValue: _i7.Future<T?>.value(),
        returnValueForMissingStub: _i7.Future<T?>.value(),
      ) as _i7.Future<T?>);

  @override
  _i7.Future<T?> replaceWith<T extends Object?>(
    _i2.PageRouteInfo<dynamic>? route, {
    _i2.OnNavigationFailure? onFailure,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #replaceWith,
          [route],
          {#onFailure: onFailure},
        ),
        returnValue: _i7.Future<T?>.value(),
        returnValueForMissingStub: _i7.Future<T?>.value(),
      ) as _i7.Future<T?>);

  @override
  _i7.Future<void> clearStackAndShow(
    _i2.PageRouteInfo<dynamic>? route, {
    _i2.OnNavigationFailure? onFailure,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #clearStackAndShow,
          [route],
          {#onFailure: onFailure},
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> clearStackAndShowView(
    _i3.Widget? widget, {
    _i3.RouteTransitionsBuilder? transitionBuilder,
    bool? fullscreenDialog = false,
    Duration? transitionDuration = const Duration(milliseconds: 300),
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #clearStackAndShowView,
          [widget],
          {
            #transitionBuilder: transitionBuilder,
            #fullscreenDialog: fullscreenDialog,
            #transitionDuration: transitionDuration,
          },
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  void popForced<T extends Object?>([T? result]) => super.noSuchMethod(
        Invocation.method(
          #popForced,
          [result],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i7.Future<bool> pop<T extends Object?>([T? result]) => (super.noSuchMethod(
        Invocation.method(
          #pop,
          [result],
        ),
        returnValue: _i7.Future<bool>.value(false),
        returnValueForMissingStub: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);

  @override
  void back<T extends Object?>({T? result}) => super.noSuchMethod(
        Invocation.method(
          #back,
          [],
          {#result: result},
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.RoutingController topMostRouter({bool? ignorePagelessRoutes = false}) => (super.noSuchMethod(
        Invocation.method(
          #topMostRouter,
          [],
          {#ignorePagelessRoutes: ignorePagelessRoutes},
        ),
        returnValue: _FakeRoutingController_2(
          this,
          Invocation.method(
            #topMostRouter,
            [],
            {#ignorePagelessRoutes: ignorePagelessRoutes},
          ),
        ),
        returnValueForMissingStub: _FakeRoutingController_2(
          this,
          Invocation.method(
            #topMostRouter,
            [],
            {#ignorePagelessRoutes: ignorePagelessRoutes},
          ),
        ),
      ) as _i2.RoutingController);

  @override
  _i7.Future<T?> pushNativeRoute<T extends Object?>(_i3.Route<T>? route) => (super.noSuchMethod(
        Invocation.method(
          #pushNativeRoute,
          [route],
        ),
        returnValue: _i7.Future<T?>.value(),
        returnValueForMissingStub: _i7.Future<T?>.value(),
      ) as _i7.Future<T?>);
}

/// A class which mocks [BottomSheetService].
///
/// See the documentation for Mockito's code generation for more information.
class MockBottomSheetService extends _i1.Mock implements _i8.BottomSheetService {
  @override
  void setCustomSheetBuilders(Map<dynamic, _i8.SheetBuilder>? builders) => super.noSuchMethod(
        Invocation.method(
          #setCustomSheetBuilders,
          [builders],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i7.Future<_i9.SheetResponse<dynamic>?> showBottomSheet({
    required String? title,
    String? description,
    String? confirmButtonTitle = r'Ok',
    String? cancelButtonTitle,
    bool? enableDrag = true,
    bool? barrierDismissible = true,
    bool? isScrollControlled = false,
    Duration? exitBottomSheetDuration,
    Duration? enterBottomSheetDuration,
    bool? ignoreSafeArea,
    bool? useRootNavigator = false,
    double? elevation = 1.0,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #showBottomSheet,
          [],
          {
            #title: title,
            #description: description,
            #confirmButtonTitle: confirmButtonTitle,
            #cancelButtonTitle: cancelButtonTitle,
            #enableDrag: enableDrag,
            #barrierDismissible: barrierDismissible,
            #isScrollControlled: isScrollControlled,
            #exitBottomSheetDuration: exitBottomSheetDuration,
            #enterBottomSheetDuration: enterBottomSheetDuration,
            #ignoreSafeArea: ignoreSafeArea,
            #useRootNavigator: useRootNavigator,
            #elevation: elevation,
          },
        ),
        returnValue: _i7.Future<_i9.SheetResponse<dynamic>?>.value(),
        returnValueForMissingStub: _i7.Future<_i9.SheetResponse<dynamic>?>.value(),
      ) as _i7.Future<_i9.SheetResponse<dynamic>?>);

  @override
  _i7.Future<_i9.SheetResponse<T>?> showCustomSheet<T, R>({
    dynamic variant,
    String? title,
    String? description,
    bool? hasImage = false,
    String? imageUrl,
    bool? showIconInMainButton = false,
    String? mainButtonTitle,
    bool? showIconInSecondaryButton = false,
    String? secondaryButtonTitle,
    bool? showIconInAdditionalButton = false,
    String? additionalButtonTitle,
    bool? takesInput = false,
    _i4.Color? barrierColor = const _i4.Color(2315255808),
    double? elevation = 1.0,
    bool? barrierDismissible = true,
    bool? isScrollControlled = false,
    String? barrierLabel = r'',
    dynamic customData,
    R? data,
    bool? enableDrag = true,
    Duration? exitBottomSheetDuration,
    Duration? enterBottomSheetDuration,
    bool? ignoreSafeArea,
    bool? useRootNavigator = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #showCustomSheet,
          [],
          {
            #variant: variant,
            #title: title,
            #description: description,
            #hasImage: hasImage,
            #imageUrl: imageUrl,
            #showIconInMainButton: showIconInMainButton,
            #mainButtonTitle: mainButtonTitle,
            #showIconInSecondaryButton: showIconInSecondaryButton,
            #secondaryButtonTitle: secondaryButtonTitle,
            #showIconInAdditionalButton: showIconInAdditionalButton,
            #additionalButtonTitle: additionalButtonTitle,
            #takesInput: takesInput,
            #barrierColor: barrierColor,
            #elevation: elevation,
            #barrierDismissible: barrierDismissible,
            #isScrollControlled: isScrollControlled,
            #barrierLabel: barrierLabel,
            #customData: customData,
            #data: data,
            #enableDrag: enableDrag,
            #exitBottomSheetDuration: exitBottomSheetDuration,
            #enterBottomSheetDuration: enterBottomSheetDuration,
            #ignoreSafeArea: ignoreSafeArea,
            #useRootNavigator: useRootNavigator,
          },
        ),
        returnValue: _i7.Future<_i9.SheetResponse<T>?>.value(),
        returnValueForMissingStub: _i7.Future<_i9.SheetResponse<T>?>.value(),
      ) as _i7.Future<_i9.SheetResponse<T>?>);

  @override
  void completeSheet(_i9.SheetResponse<dynamic>? response) => super.noSuchMethod(
        Invocation.method(
          #completeSheet,
          [response],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [DialogService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDialogService extends _i1.Mock implements _i10.DialogService {
  @override
  void registerCustomDialogBuilders(Map<dynamic, _i10.DialogBuilder>? builders) => super.noSuchMethod(
        Invocation.method(
          #registerCustomDialogBuilders,
          [builders],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void registerCustomDialogBuilder({
    required dynamic variant,
    required _i3.Widget Function(
      _i3.BuildContext,
      _i11.DialogRequest<dynamic>,
      dynamic Function(_i9.DialogResponse<dynamic>),
    )? builder,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #registerCustomDialogBuilder,
          [],
          {
            #variant: variant,
            #builder: builder,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i7.Future<_i9.DialogResponse<dynamic>?> showDialog({
    String? title,
    String? description,
    String? cancelTitle,
    _i4.Color? cancelTitleColor,
    String? buttonTitle = r'Ok',
    _i4.Color? buttonTitleColor,
    bool? barrierDismissible = false,
    _i10.DialogPlatform? dialogPlatform,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #showDialog,
          [],
          {
            #title: title,
            #description: description,
            #cancelTitle: cancelTitle,
            #cancelTitleColor: cancelTitleColor,
            #buttonTitle: buttonTitle,
            #buttonTitleColor: buttonTitleColor,
            #barrierDismissible: barrierDismissible,
            #dialogPlatform: dialogPlatform,
          },
        ),
        returnValue: _i7.Future<_i9.DialogResponse<dynamic>?>.value(),
        returnValueForMissingStub: _i7.Future<_i9.DialogResponse<dynamic>?>.value(),
      ) as _i7.Future<_i9.DialogResponse<dynamic>?>);

  @override
  _i7.Future<_i9.DialogResponse<T>?> showCustomDialog<T, R>({
    dynamic variant,
    String? title,
    String? description,
    bool? hasImage = false,
    String? imageUrl,
    bool? showIconInMainButton = false,
    String? mainButtonTitle,
    bool? showIconInSecondaryButton = false,
    String? secondaryButtonTitle,
    bool? showIconInAdditionalButton = false,
    String? additionalButtonTitle,
    bool? takesInput = false,
    _i4.Color? barrierColor = const _i4.Color(2315255808),
    bool? barrierDismissible = false,
    String? barrierLabel = r'',
    bool? useSafeArea = true,
    dynamic customData,
    R? data,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #showCustomDialog,
          [],
          {
            #variant: variant,
            #title: title,
            #description: description,
            #hasImage: hasImage,
            #imageUrl: imageUrl,
            #showIconInMainButton: showIconInMainButton,
            #mainButtonTitle: mainButtonTitle,
            #showIconInSecondaryButton: showIconInSecondaryButton,
            #secondaryButtonTitle: secondaryButtonTitle,
            #showIconInAdditionalButton: showIconInAdditionalButton,
            #additionalButtonTitle: additionalButtonTitle,
            #takesInput: takesInput,
            #barrierColor: barrierColor,
            #barrierDismissible: barrierDismissible,
            #barrierLabel: barrierLabel,
            #useSafeArea: useSafeArea,
            #customData: customData,
            #data: data,
          },
        ),
        returnValue: _i7.Future<_i9.DialogResponse<T>?>.value(),
        returnValueForMissingStub: _i7.Future<_i9.DialogResponse<T>?>.value(),
      ) as _i7.Future<_i9.DialogResponse<T>?>);

  @override
  _i7.Future<_i9.DialogResponse<dynamic>?> showConfirmationDialog({
    String? title,
    String? description,
    String? cancelTitle = r'Cancel',
    _i4.Color? cancelTitleColor,
    String? confirmationTitle = r'Ok',
    _i4.Color? confirmationTitleColor,
    bool? barrierDismissible = false,
    _i10.DialogPlatform? dialogPlatform,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #showConfirmationDialog,
          [],
          {
            #title: title,
            #description: description,
            #cancelTitle: cancelTitle,
            #cancelTitleColor: cancelTitleColor,
            #confirmationTitle: confirmationTitle,
            #confirmationTitleColor: confirmationTitleColor,
            #barrierDismissible: barrierDismissible,
            #dialogPlatform: dialogPlatform,
          },
        ),
        returnValue: _i7.Future<_i9.DialogResponse<dynamic>?>.value(),
        returnValueForMissingStub: _i7.Future<_i9.DialogResponse<dynamic>?>.value(),
      ) as _i7.Future<_i9.DialogResponse<dynamic>?>);

  @override
  void completeDialog(_i9.DialogResponse<dynamic>? response) => super.noSuchMethod(
        Invocation.method(
          #completeDialog,
          [response],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [PageStorageService].
///
/// See the documentation for Mockito's code generation for more information.
class MockPageStorageService extends _i1.Mock implements _i12.PageStorageService {
  @override
  _i3.GlobalKey<_i3.State<_i3.StatefulWidget>> get pageStorageKey => (super.noSuchMethod(
        Invocation.getter(#pageStorageKey),
        returnValue: _FakeGlobalKey_3<_i3.State<_i3.StatefulWidget>>(
          this,
          Invocation.getter(#pageStorageKey),
        ),
        returnValueForMissingStub: _FakeGlobalKey_3<_i3.State<_i3.StatefulWidget>>(
          this,
          Invocation.getter(#pageStorageKey),
        ),
      ) as _i3.GlobalKey<_i3.State<_i3.StatefulWidget>>);

  @override
  dynamic read(String? identifier) => super.noSuchMethod(
        Invocation.method(
          #read,
          [identifier],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void write(
    dynamic data, {
    required String? identifier,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #write,
          [data],
          {#identifier: identifier},
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [SettingsService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSettingsService extends _i1.Mock implements _i13.SettingsService {
  @override
  bool get darkMode => (super.noSuchMethod(
        Invocation.getter(#darkMode),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i4.Locale get locale => (super.noSuchMethod(
        Invocation.getter(#locale),
        returnValue: _FakeLocale_4(
          this,
          Invocation.getter(#locale),
        ),
        returnValueForMissingStub: _FakeLocale_4(
          this,
          Invocation.getter(#locale),
        ),
      ) as _i4.Locale);

  @override
  bool get multiLanguageSearch => (super.noSuchMethod(
        Invocation.getter(#multiLanguageSearch),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  int get listenersCount => (super.noSuchMethod(
        Invocation.getter(#listenersCount),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  _i7.Future<void> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  void setDarkMode(bool? state) => super.noSuchMethod(
        Invocation.method(
          #setDarkMode,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setLocale(_i4.Locale? locale) => super.noSuchMethod(
        Invocation.method(
          #setLocale,
          [locale],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setMutliLanguageSearch(bool? state) => super.noSuchMethod(
        Invocation.method(
          #setMutliLanguageSearch,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void listenToReactiveValues(List<dynamic>? reactiveValues) => super.noSuchMethod(
        Invocation.method(
          #listenToReactiveValues,
          [reactiveValues],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(void Function()? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(void Function()? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [PokemonDataService].
///
/// See the documentation for Mockito's code generation for more information.
class MockPokemonDataService extends _i1.Mock implements _i14.PokemonDataService {
  @override
  List<_i15.Generation> get allGenerations => (super.noSuchMethod(
        Invocation.getter(#allGenerations),
        returnValue: <_i15.Generation>[],
        returnValueForMissingStub: <_i15.Generation>[],
      ) as List<_i15.Generation>);

  @override
  set allGenerations(List<_i15.Generation>? _allGenerations) => super.noSuchMethod(
        Invocation.setter(
          #allGenerations,
          _allGenerations,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<_i16.Pokemon> get allPokemon => (super.noSuchMethod(
        Invocation.getter(#allPokemon),
        returnValue: <_i16.Pokemon>[],
        returnValueForMissingStub: <_i16.Pokemon>[],
      ) as List<_i16.Pokemon>);

  @override
  set allPokemon(List<_i16.Pokemon>? _allPokemon) => super.noSuchMethod(
        Invocation.setter(
          #allPokemon,
          _allPokemon,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<_i17.Move> get allMoves => (super.noSuchMethod(
        Invocation.getter(#allMoves),
        returnValue: <_i17.Move>[],
        returnValueForMissingStub: <_i17.Move>[],
      ) as List<_i17.Move>);

  @override
  set allMoves(List<_i17.Move>? _allMoves) => super.noSuchMethod(
        Invocation.setter(
          #allMoves,
          _allMoves,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<_i16.Pokemon> getAllPokemon(_i15.Generation? generation) => (super.noSuchMethod(
        Invocation.method(
          #getAllPokemon,
          [generation],
        ),
        returnValue: <_i16.Pokemon>[],
        returnValueForMissingStub: <_i16.Pokemon>[],
      ) as List<_i16.Pokemon>);

  @override
  List<_i17.Move> getAllMoves(int? generation) => (super.noSuchMethod(
        Invocation.method(
          #getAllMoves,
          [generation],
        ),
        returnValue: <_i17.Move>[],
        returnValueForMissingStub: <_i17.Move>[],
      ) as List<_i17.Move>);

  @override
  _i7.Future<bool> initialize({bool? retry = false}) => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
          {#retry: retry},
        ),
        returnValue: _i7.Future<bool>.value(false),
        returnValueForMissingStub: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);

  @override
  double getDamage({
    required _i18.PokemonType? offensiveType,
    required _i18.PokemonType? defensiveType1,
    required _i18.PokemonType? defensiveType2,
    required int? generation,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDamage,
          [],
          {
            #offensiveType: offensiveType,
            #defensiveType1: defensiveType1,
            #defensiveType2: defensiveType2,
            #generation: generation,
          },
        ),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);

  @override
  bool isTypeInvalidForGeneration({
    required _i18.PokemonType? type,
    required _i15.Generation? generation,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #isTypeInvalidForGeneration,
          [],
          {
            #type: type,
            #generation: generation,
          },
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
}

/// A class which mocks [BackendApiService].
///
/// See the documentation for Mockito's code generation for more information.
class MockBackendApiService extends _i1.Mock implements _i19.BackendApiService {
  @override
  _i7.Future<_i5.NetworkResult<Map<String, dynamic>>> getPokemonData() => (super.noSuchMethod(
        Invocation.method(
          #getPokemonData,
          [],
        ),
        returnValue: _i7.Future<_i5.NetworkResult<Map<String, dynamic>>>.value(_FakeNetworkResult_5<Map<String, dynamic>>(
          this,
          Invocation.method(
            #getPokemonData,
            [],
          ),
        )),
        returnValueForMissingStub: _i7.Future<_i5.NetworkResult<Map<String, dynamic>>>.value(_FakeNetworkResult_5<Map<String, dynamic>>(
          this,
          Invocation.method(
            #getPokemonData,
            [],
          ),
        )),
      ) as _i7.Future<_i5.NetworkResult<Map<String, dynamic>>>);

  @override
  _i7.Future<_i5.NetworkResult<List<_i20.Team>>> getTeams({required String? languageCode}) => (super.noSuchMethod(
        Invocation.method(
          #getTeams,
          [],
          {#languageCode: languageCode},
        ),
        returnValue: _i7.Future<_i5.NetworkResult<List<_i20.Team>>>.value(_FakeNetworkResult_5<List<_i20.Team>>(
          this,
          Invocation.method(
            #getTeams,
            [],
            {#languageCode: languageCode},
          ),
        )),
        returnValueForMissingStub: _i7.Future<_i5.NetworkResult<List<_i20.Team>>>.value(_FakeNetworkResult_5<List<_i20.Team>>(
          this,
          Invocation.method(
            #getTeams,
            [],
            {#languageCode: languageCode},
          ),
        )),
      ) as _i7.Future<_i5.NetworkResult<List<_i20.Team>>>);

  @override
  _i7.Future<_i5.NetworkResult<void>> deleteTeam({required String? teamId}) => (super.noSuchMethod(
        Invocation.method(
          #deleteTeam,
          [],
          {#teamId: teamId},
        ),
        returnValue: _i7.Future<_i5.NetworkResult<void>>.value(_FakeNetworkResult_5<void>(
          this,
          Invocation.method(
            #deleteTeam,
            [],
            {#teamId: teamId},
          ),
        )),
        returnValueForMissingStub: _i7.Future<_i5.NetworkResult<void>>.value(_FakeNetworkResult_5<void>(
          this,
          Invocation.method(
            #deleteTeam,
            [],
            {#teamId: teamId},
          ),
        )),
      ) as _i7.Future<_i5.NetworkResult<void>>);

  @override
  _i7.Future<_i5.NetworkResult<void>> login({
    required String? username,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #login,
          [],
          {
            #username: username,
            #password: password,
          },
        ),
        returnValue: _i7.Future<_i5.NetworkResult<void>>.value(_FakeNetworkResult_5<void>(
          this,
          Invocation.method(
            #login,
            [],
            {
              #username: username,
              #password: password,
            },
          ),
        )),
        returnValueForMissingStub: _i7.Future<_i5.NetworkResult<void>>.value(_FakeNetworkResult_5<void>(
          this,
          Invocation.method(
            #login,
            [],
            {
              #username: username,
              #password: password,
            },
          ),
        )),
      ) as _i7.Future<_i5.NetworkResult<void>>);

  @override
  _i7.Future<_i5.NetworkResult<void>> register({
    required String? username,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #register,
          [],
          {
            #username: username,
            #password: password,
          },
        ),
        returnValue: _i7.Future<_i5.NetworkResult<void>>.value(_FakeNetworkResult_5<void>(
          this,
          Invocation.method(
            #register,
            [],
            {
              #username: username,
              #password: password,
            },
          ),
        )),
        returnValueForMissingStub: _i7.Future<_i5.NetworkResult<void>>.value(_FakeNetworkResult_5<void>(
          this,
          Invocation.method(
            #register,
            [],
            {
              #username: username,
              #password: password,
            },
          ),
        )),
      ) as _i7.Future<_i5.NetworkResult<void>>);

  @override
  _i7.Future<_i5.NetworkResult<bool>> saveTeam({
    required String? name,
    required String? languageCode,
    required int? generation,
    required List<Map<String, dynamic>>? team,
    bool? overwrite = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveTeam,
          [],
          {
            #name: name,
            #languageCode: languageCode,
            #generation: generation,
            #team: team,
            #overwrite: overwrite,
          },
        ),
        returnValue: _i7.Future<_i5.NetworkResult<bool>>.value(_FakeNetworkResult_5<bool>(
          this,
          Invocation.method(
            #saveTeam,
            [],
            {
              #name: name,
              #languageCode: languageCode,
              #generation: generation,
              #team: team,
              #overwrite: overwrite,
            },
          ),
        )),
        returnValueForMissingStub: _i7.Future<_i5.NetworkResult<bool>>.value(_FakeNetworkResult_5<bool>(
          this,
          Invocation.method(
            #saveTeam,
            [],
            {
              #name: name,
              #languageCode: languageCode,
              #generation: generation,
              #team: team,
              #overwrite: overwrite,
            },
          ),
        )),
      ) as _i7.Future<_i5.NetworkResult<bool>>);
}

/// A class which mocks [CustomSnackbarService].
///
/// See the documentation for Mockito's code generation for more information.
class MockCustomSnackbarService extends _i1.Mock implements _i21.CustomSnackbarService {
  @override
  _i3.ScaffoldFeatureController<_i3.SnackBar, _i3.SnackBarClosedReason> showCustomSnackBar(
    _i3.SnackBar? snackBar, {
    _i3.AnimationStyle? snackBarAnimationStyle,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #showCustomSnackBar,
          [snackBar],
          {#snackBarAnimationStyle: snackBarAnimationStyle},
        ),
        returnValue: _FakeScaffoldFeatureController_6<_i3.SnackBar, _i3.SnackBarClosedReason>(
          this,
          Invocation.method(
            #showCustomSnackBar,
            [snackBar],
            {#snackBarAnimationStyle: snackBarAnimationStyle},
          ),
        ),
        returnValueForMissingStub: _FakeScaffoldFeatureController_6<_i3.SnackBar, _i3.SnackBarClosedReason>(
          this,
          Invocation.method(
            #showCustomSnackBar,
            [snackBar],
            {#snackBarAnimationStyle: snackBarAnimationStyle},
          ),
        ),
      ) as _i3.ScaffoldFeatureController<_i3.SnackBar, _i3.SnackBarClosedReason>);

  @override
  _i3.ScaffoldFeatureController<_i3.SnackBar, _i3.SnackBarClosedReason> showSuccessSnackBar({required String? message}) => (super.noSuchMethod(
        Invocation.method(
          #showSuccessSnackBar,
          [],
          {#message: message},
        ),
        returnValue: _FakeScaffoldFeatureController_6<_i3.SnackBar, _i3.SnackBarClosedReason>(
          this,
          Invocation.method(
            #showSuccessSnackBar,
            [],
            {#message: message},
          ),
        ),
        returnValueForMissingStub: _FakeScaffoldFeatureController_6<_i3.SnackBar, _i3.SnackBarClosedReason>(
          this,
          Invocation.method(
            #showSuccessSnackBar,
            [],
            {#message: message},
          ),
        ),
      ) as _i3.ScaffoldFeatureController<_i3.SnackBar, _i3.SnackBarClosedReason>);

  @override
  _i3.ScaffoldFeatureController<_i3.SnackBar, _i3.SnackBarClosedReason> showErrorSnackBar({required String? message}) => (super.noSuchMethod(
        Invocation.method(
          #showErrorSnackBar,
          [],
          {#message: message},
        ),
        returnValue: _FakeScaffoldFeatureController_6<_i3.SnackBar, _i3.SnackBarClosedReason>(
          this,
          Invocation.method(
            #showErrorSnackBar,
            [],
            {#message: message},
          ),
        ),
        returnValueForMissingStub: _FakeScaffoldFeatureController_6<_i3.SnackBar, _i3.SnackBarClosedReason>(
          this,
          Invocation.method(
            #showErrorSnackBar,
            [],
            {#message: message},
          ),
        ),
      ) as _i3.ScaffoldFeatureController<_i3.SnackBar, _i3.SnackBarClosedReason>);

  @override
  _i3.ScaffoldFeatureController<_i3.SnackBar, _i3.SnackBarClosedReason> showDetailedErrorSnackBar({
    required String? message,
    required String? detailedMessage,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #showDetailedErrorSnackBar,
          [],
          {
            #message: message,
            #detailedMessage: detailedMessage,
          },
        ),
        returnValue: _FakeScaffoldFeatureController_6<_i3.SnackBar, _i3.SnackBarClosedReason>(
          this,
          Invocation.method(
            #showDetailedErrorSnackBar,
            [],
            {
              #message: message,
              #detailedMessage: detailedMessage,
            },
          ),
        ),
        returnValueForMissingStub: _FakeScaffoldFeatureController_6<_i3.SnackBar, _i3.SnackBarClosedReason>(
          this,
          Invocation.method(
            #showDetailedErrorSnackBar,
            [],
            {
              #message: message,
              #detailedMessage: detailedMessage,
            },
          ),
        ),
      ) as _i3.ScaffoldFeatureController<_i3.SnackBar, _i3.SnackBarClosedReason>);
}

/// A class which mocks [CustomDialogService].
///
/// See the documentation for Mockito's code generation for more information.
class MockCustomDialogService extends _i1.Mock implements _i22.CustomDialogService {
  @override
  _i7.Future<T?> showDialog<T>({
    required _i3.WidgetBuilder? builder,
    bool? barrierDismissible = true,
    _i4.Color? barrierColor,
    String? barrierLabel,
    bool? useSafeArea = true,
    bool? useRootNavigator = true,
    _i3.RouteSettings? routeSettings,
    _i4.Offset? anchorPoint,
    _i3.TraversalEdgeBehavior? traversalEdgeBehavior,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #showDialog,
          [],
          {
            #builder: builder,
            #barrierDismissible: barrierDismissible,
            #barrierColor: barrierColor,
            #barrierLabel: barrierLabel,
            #useSafeArea: useSafeArea,
            #useRootNavigator: useRootNavigator,
            #routeSettings: routeSettings,
            #anchorPoint: anchorPoint,
            #traversalEdgeBehavior: traversalEdgeBehavior,
          },
        ),
        returnValue: _i7.Future<T?>.value(),
        returnValueForMissingStub: _i7.Future<T?>.value(),
      ) as _i7.Future<T?>);
}

/// A class which mocks [CustomBottomSheetService].
///
/// See the documentation for Mockito's code generation for more information.
class MockCustomBottomSheetService extends _i1.Mock implements _i23.CustomBottomSheetService {
  @override
  _i7.Future<T?> showModalBottomSheet<T>({
    required _i3.WidgetBuilder? builder,
    _i4.Color? backgroundColor,
    String? barrierLabel,
    double? elevation,
    _i3.ShapeBorder? shape,
    _i4.Clip? clipBehavior,
    _i3.BoxConstraints? constraints,
    _i4.Color? barrierColor,
    bool? isScrollControlled = false,
    double? scrollControlDisabledMaxHeightRatio = 0.5625,
    bool? useRootNavigator = false,
    bool? isDismissible = true,
    bool? enableDrag = true,
    bool? showDragHandle,
    bool? useSafeArea = false,
    _i3.RouteSettings? routeSettings,
    _i3.AnimationController? transitionAnimationController,
    _i4.Offset? anchorPoint,
    _i3.AnimationStyle? sheetAnimationStyle,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #showModalBottomSheet,
          [],
          {
            #builder: builder,
            #backgroundColor: backgroundColor,
            #barrierLabel: barrierLabel,
            #elevation: elevation,
            #shape: shape,
            #clipBehavior: clipBehavior,
            #constraints: constraints,
            #barrierColor: barrierColor,
            #isScrollControlled: isScrollControlled,
            #scrollControlDisabledMaxHeightRatio: scrollControlDisabledMaxHeightRatio,
            #useRootNavigator: useRootNavigator,
            #isDismissible: isDismissible,
            #enableDrag: enableDrag,
            #showDragHandle: showDragHandle,
            #useSafeArea: useSafeArea,
            #routeSettings: routeSettings,
            #transitionAnimationController: transitionAnimationController,
            #anchorPoint: anchorPoint,
            #sheetAnimationStyle: sheetAnimationStyle,
          },
        ),
        returnValue: _i7.Future<T?>.value(),
        returnValueForMissingStub: _i7.Future<T?>.value(),
      ) as _i7.Future<T?>);
}

/// A class which mocks [WebOutdatedCacheService].
///
/// See the documentation for Mockito's code generation for more information.
class MockWebOutdatedCacheService extends _i1.Mock implements _i24.WebOutdatedCacheService {
  @override
  _i7.Future<_i5.NetworkResult<bool>> isCachedFrontendOutdated() => (super.noSuchMethod(
        Invocation.method(
          #isCachedFrontendOutdated,
          [],
        ),
        returnValue: _i7.Future<_i5.NetworkResult<bool>>.value(_FakeNetworkResult_5<bool>(
          this,
          Invocation.method(
            #isCachedFrontendOutdated,
            [],
          ),
        )),
        returnValueForMissingStub: _i7.Future<_i5.NetworkResult<bool>>.value(_FakeNetworkResult_5<bool>(
          this,
          Invocation.method(
            #isCachedFrontendOutdated,
            [],
          ),
        )),
      ) as _i7.Future<_i5.NetworkResult<bool>>);
}
